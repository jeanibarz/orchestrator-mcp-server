[project]
name = "orchestrator-mcp-server"
version = "0.1.0"
description = "An MCP server that orchestrates workflows."
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "fastmcp>=2.0.0",
    "mcp>=1.6.0",
    "mypy>=1.15.0",
    "mypy-extensions>=1.0.0",
    "pydantic>=2.0.0",
    "pydantic-core>=2.10.0",
    "pydantic-extra-types>=2.10.3",
    "pytest",
    "pytest-asyncio", # Added for asyncio test support
    "pytest-cov", # Added for coverage reporting
    "pytest-mock", # Added for mocker fixture in tests
    "types-colorama>=0.4.15.20240311",
    "types-pexpect>=4.9.0.20241208",
    "types-pygments>=2.19.0.20250305",
    "types-requests>=2.32.0.20250328",
    "google-generativeai>=0.8.5",
    "types-setuptools>=78.1.0.20250329",
    'tomli>=1.1.0; python_version < "3.11"', # Added conditional dependency for TOML parsing
    "typing-extensions>=4.13.2",
    "typing-inspection>=0.4.0", # Added dependency for pydantic plugin
    "requests>=2.32.3",
]
[[project.authors]]
name = "jean_ibarz"
email = "ibarz.jean@gmail.com"

[project.optional-dependencies]
dev = [
    "pre-commit>=3.0.0", # Use a reasonable minimum version
]

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project.scripts]
orchestrator-mcp-server = "orchestrator_mcp_server.server:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.mypy]
exclude = "build/"
plugins = ["pydantic.mypy"] # Enable Pydantic plugin
# Removed redundant package_dir = {"" = "src"}

[tool.ruff.lint]
extend-select = ["ALL"]
ignore = ["E501", "D203", "D212"]

[tool.ruff]
line-length = 120

[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
]
addopts = "--strict-markers -v"
asyncio_mode = "strict"
